#
# This DaemonSet only works on selected nodes
# use kubectl label nodes denver exporter-bme380/enabled=true to allow the exporter provisioned on the node
# help see here. https://github.com/KesiSound/BMPDisplay

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ include "prometheus-bme280-exporter.fullname" . }}
  labels:
    {{- include "prometheus-bme280-exporter.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "prometheus-bme280-exporter.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "prometheus-bme280-exporter.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "prometheus-bme280-exporter.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- with .Values.args }}
          args:
          {{- range . }}
            - {{ . | quote }}
          {{- end }}
          {{- end }}
          {{- if .Values.envVars }}
          env:
          {{- if .Values.port }}
            - name: PORT
              value: {{ .Values.port }}
          {{- end }}
          {{- if .Values.logLevel }}
            - name: LOGLEVEL
              value: {{ .Values.logLevel }}
          {{- end }}
{{ tpl .Values.envVars . | indent 12 }}
        {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.port | default 9123}}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: {{ .Values.livenessProbe.Path }}
              port: {{ .Values.livenessProbe.Port }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          readinessProbe:
            httpGet:
              path: {{ .Values.livenessProbe.Path }}
              port: {{ .Values.livenessProbe.Port }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}           
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
          - name: device
            mountPath: /dev/i2c-1
      volumes:
      - name: device
        hostPath:
          path: /dev/i2c-1                        
      {{- with .Values.nodeSelector }}
      terminationGracePeriodSeconds: 10
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
